{"version":3,"sources":["container/App/AsyncComponent.js","route/PublicRoute.js","container/App/index.js","utility/history.js","reducers/moviesReducer.js","reducers/movieDetailsReducer.js","reducers/index.js","store/appStore.js","serviceWorker.js","index.js","actions/actionTypes.js"],"names":["AsyncAppLayout","loadable","AsyncMovies","AsyncInternalServer","AsyncNotFound","AsyncForbidden","PublicRoute","Component","component","Layout","layout","rest","render","props","withRouter","exact","path","history","createHistory","hashType","INITIAL_STATE","payload","loading","errors","moviesReducer","state","action","type","MOVIE_FETCH_REQUEST","Object","assign","MOVIE_FETCH_REQUEST_SUCCESS","data","MOVIE_FETCH_REQUEST_FAILURE","error","MOVIE_CLEAN_REQUEST","MOVIE_DETAIL_FETCH_REQUEST","MOVIE_DETAIL_FETCH_REQUEST_SUCCESS","MOVIE_DETAIL_FETCH_REQUEST_FAILURE","MOVIE_DETAIL_CLEAN_REQUEST","rootReducer","combineReducers","router","connectRouter","movies","movieDetails","movieDetailsReducer","appStore","initialState","middlewares","thunk","routerMiddleware","createStore","compose","applyMiddleware","Boolean","window","location","hostname","match","store","mountNode","document","getElementById","fallback","className","basename","process","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kPAEaA,EAAiBC,aAAS,kBAAM,uDAEhCC,EAAcD,aAAS,kBAAM,qEAE7BE,EAAsBF,aAAS,kBACxC,8DAESG,EAAgBH,aAAS,kBAAM,+DAC/BI,EAAiBJ,aAAS,kBAAM,8D,QCI9BK,EAXK,SAAC,GAAD,IAAcC,EAAd,EAAGC,UAA8BC,EAAjC,EAAyBC,OAAmBC,EAA5C,6CAChB,kBAAC,IAAD,iBACQA,EADR,CAEIC,OAAQ,SAAAC,GAAK,OACT,kBAACJ,EAAD,KACI,kBAACF,EAAcM,SCkBhBC,eAbH,kBACR,kBAAC,WAAD,KACI,kBAAC,IAAD,KACI,kBAAC,EAAD,CAAaC,OAAK,EAACC,KAAK,IAAKN,OAAQV,EAAiBQ,UAAWN,IACjE,kBAAC,EAAD,CAAac,KAAK,OAAON,OAAQV,EAAgBQ,UAAWH,IAE5D,kBAAC,IAAD,CAAOW,KAAK,OAAOR,UAAWL,IAC9B,kBAAC,IAAD,CAAOa,KAAK,OAAOR,UAAWJ,IAC9B,kBAAC,IAAD,CAAOI,UAAWJ,S,6CCffa,EAHCC,YAAc,CAC5BC,SAAU,U,OCGNC,EAAgB,CAClBC,QAAS,GACTC,SAAS,EACTC,OAAQ,IAwCGC,EAlCO,SAACC,EAAOC,GAG1B,OAFAD,EAAQA,GAASL,EAETM,EAAOC,MACX,KAAKC,IACD,OAAOC,OAAOC,OAAO,GAAIL,EAAO,CAC5BH,SAAS,IAGjB,KAAKS,IACD,OAAOF,OAAOC,OAAO,GAAIL,EAAO,CAC5BJ,QAASK,EAAOM,KAChBV,SAAS,EACTC,OAAQ,KAGhB,KAAKU,IACD,OAAOJ,OAAOC,OAAO,GAAIL,EAAO,CAC5BH,SAAS,EACTC,OAAQG,EAAOQ,QAGvB,KAAKC,IACD,OAAON,OAAOC,OAAO,GAAIL,EAAO,CAC5BJ,QAAS,GACTC,SAAS,EACTC,OAAQ,KAGhB,QACI,OAAOE,ICvCbL,EAAgB,CAClBC,QAAS,GACTC,SAAS,EACTC,OAAQ,IAwCGC,EAlCO,SAACC,EAAOC,GAG1B,OAFAD,EAAQA,GAASL,EAETM,EAAOC,MACX,KAAKS,IACD,OAAOP,OAAOC,OAAO,GAAIL,EAAO,CAC5BH,SAAS,IAGjB,KAAKe,IACD,OAAOR,OAAOC,OAAO,GAAIL,EAAO,CAC5BJ,QAASK,EAAOM,KAChBV,SAAS,EACTC,OAAQ,KAGhB,KAAKe,IACD,OAAOT,OAAOC,OAAO,GAAIL,EAAO,CAC5BH,SAAS,EACTC,OAAQG,EAAOQ,QAGvB,KAAKK,IACD,OAAOV,OAAOC,OAAO,GAAIL,EAAO,CAC5BJ,QAAS,GACTC,SAAS,EACTC,OAAQ,KAGhB,QACI,OAAOE,IChCJe,EANKC,YAAgB,CAChCC,OAAQC,YAAc1B,GACtB2B,OAAQpB,EACRqB,aAAaC,ICMFC,EAXE,WAAiC,IAAhCC,EAA+B,uDAAhB,GAAI/B,EAAY,uCAMvCgC,EAAc,CAAEC,IAAOC,YAAiBlC,IAE9C,OAAOmC,YAAYZ,EAAaQ,EAAcK,YAAQC,IAAe,WAAf,EAAmBL,MCFzDM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCAN,IAAMC,EAAQb,EAAS,GAAI9B,GACrB4C,EAAYC,SAASC,eAAe,QAE1CnD,iBACI,kBAAC,WAAD,CAAUoD,SAAU,yBAAKC,UAAU,oBAAf,mCAChB,kBAAC,IAAD,CAAUL,MAAOA,GACb,kBAAC,IAAD,CAAiB3C,QAASA,GACtB,kBAAC,IAAD,CAAQiD,SAAUC,eAAwBlD,QAASA,GAC/C,kBAAC,EAAD,UAKhB4C,GDoGE,kBAAmBO,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,+BErInB,gRAAO,IAAM7C,EAAsB,sBACtBG,EAA8B,8BAC9BE,EAA8B,8BAE9BE,EAAsB,sBAEtBC,EAA6B,6BAC7BC,EAAqC,qCACrCC,EAAqC,qCAErCC,EAA6B,+B","file":"static/js/main.80cf04f1.chunk.js","sourcesContent":["import loadable from '@loadable/component';\n\nexport const AsyncAppLayout = loadable(() => import('../../component/Layout'));\n\nexport const AsyncMovies = loadable(() => import('../../container/Movies/'));\n\nexport const AsyncInternalServer = loadable(() =>\n    import('../../container/Exception/InternalServerContainer')\n);\nexport const AsyncNotFound = loadable(() => import('../../container/Exception/NotFoundContainer'));\nexport const AsyncForbidden = loadable(() => import('../../container/Exception/ForbiddenContainer'));\n","import React from 'react';\nimport { Route } from 'react-router-dom';\n\nconst PublicRoute = ({ component: Component, layout: Layout, ...rest }) => (\n    <Route\n        {...rest}\n        render={props => (\n            <Layout>\n                <Component {...props} />\n            </Layout>\n        )}\n    />\n);\n\nexport default PublicRoute;\n","import React, { Fragment } from 'react';\nimport { withRouter, Switch, Route } from 'react-router-dom';\n\nimport {\n    AsyncAppLayout,\n    AsyncInternalServer,\n    AsyncNotFound,\n    AsyncForbidden,\n    AsyncMovies,\n\n} from './AsyncComponent';\nimport PublicRoute from '../../route/PublicRoute';\n\nconst App = () => (\n    <Fragment>\n        <Switch>\n            <PublicRoute exact path=\"/\"  layout={AsyncAppLayout}  component={AsyncMovies} />\n            <PublicRoute path=\"/403\" layout={AsyncAppLayout} component={AsyncForbidden} />\n\n            <Route path=\"/500\" component={AsyncInternalServer} />\n            <Route path=\"/404\" component={AsyncNotFound} />\n            <Route component={AsyncNotFound} />\n        </Switch>\n    </Fragment>\n);\n\nexport default withRouter(App);\n","import { createHashHistory as createHistory } from 'history';\n\n// a singleton history object\nconst history = createHistory({\n  hashType: 'slash',\n});\nexport default history;\n","import {\n    MOVIE_FETCH_REQUEST,\n    MOVIE_FETCH_REQUEST_SUCCESS,\n    MOVIE_FETCH_REQUEST_FAILURE,\n    MOVIE_CLEAN_REQUEST\n} from '../actions/actionTypes'\n\nconst INITIAL_STATE = {\n    payload: [],\n    loading: false,\n    errors: {},\n};\n\n/**\n * A reducer takes two arguments, the current state and an action.\n */\nconst moviesReducer = (state, action) => {\n    state = state || INITIAL_STATE;\n\n    switch (action.type) {\n        case MOVIE_FETCH_REQUEST:\n            return Object.assign({}, state, {\n                loading: true,\n            });\n\n        case MOVIE_FETCH_REQUEST_SUCCESS:\n            return Object.assign({}, state, {\n                payload: action.data,\n                loading: false,\n                errors: {},\n            });\n\n        case MOVIE_FETCH_REQUEST_FAILURE:\n            return Object.assign({}, state, {\n                loading: false,\n                errors: action.error,\n            });\n\n        case MOVIE_CLEAN_REQUEST:\n            return Object.assign({}, state, {\n                payload: [],\n                loading: false,\n                errors: {},\n            });\n\n        default:\n            return state;\n    }\n};\n\nexport default moviesReducer;\n","import {\n    MOVIE_DETAIL_FETCH_REQUEST,\n    MOVIE_DETAIL_FETCH_REQUEST_SUCCESS,\n    MOVIE_DETAIL_FETCH_REQUEST_FAILURE,\n    MOVIE_DETAIL_CLEAN_REQUEST\n} from '../actions/actionTypes'\n\nconst INITIAL_STATE = {\n    payload: [],\n    loading: false,\n    errors: {},\n};\n\n/**\n * A reducer takes two arguments, the current state and an action.\n */\nconst moviesReducer = (state, action) => {\n    state = state || INITIAL_STATE;\n\n    switch (action.type) {\n        case MOVIE_DETAIL_FETCH_REQUEST:\n            return Object.assign({}, state, {\n                loading: true,\n            });\n\n        case MOVIE_DETAIL_FETCH_REQUEST_SUCCESS:\n            return Object.assign({}, state, {\n                payload: action.data,\n                loading: false,\n                errors: {},\n            });\n\n        case MOVIE_DETAIL_FETCH_REQUEST_FAILURE:\n            return Object.assign({}, state, {\n                loading: false,\n                errors: action.error,\n            });\n\n        case MOVIE_DETAIL_CLEAN_REQUEST:\n            return Object.assign({}, state, {\n                payload: [],\n                loading: false,\n                errors: {},\n            });\n\n        default:\n            return state;\n    }\n};\n\nexport default moviesReducer;\n","import {combineReducers} from 'redux';\nimport {connectRouter} from \"connected-react-router\";\n\nimport history from '../utility/history';\n\nimport moviesReducer from './moviesReducer';\nimport movieDetailsReducer from './movieDetailsReducer';\n\nconst rootReducer = combineReducers({\n    router: connectRouter(history),\n    movies: moviesReducer,\n    movieDetails:movieDetailsReducer\n});\n\nexport default rootReducer;\n","import {applyMiddleware, compose, createStore} from 'redux';\nimport thunk from 'redux-thunk';\nimport {routerMiddleware} from 'connected-react-router';\n\nimport rootReducer from '../reducers';\n\nconst appStore = (initialState = {}, history) => {\n    // Add middleware\n    // 1. thunk middleware can also accept an extra argument to be passed to each thunk action\n    // https://github.com/gaearon/redux-thunk#injecting-a-custom-argument\n    // 2. routerMiddleware: Syncs the location/URL path to the state\n\n    const middlewares = [ thunk, routerMiddleware(history)];\n\n    return createStore(rootReducer, initialState, compose(applyMiddleware(...middlewares)));\n};\n\nexport default appStore;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, {Suspense} from 'react';\nimport {BrowserRouter as Router} from 'react-router-dom';\nimport {ConnectedRouter} from 'connected-react-router';\nimport {Provider} from 'react-redux';\nimport {render} from 'react-dom';\n\nimport App from './container/App';\n\n//import antd css\nimport 'antd/dist/antd.css';\n\n//import global css\nimport './style/global.css'\n\nimport appStore from './store/appStore';\nimport * as serviceWorker from './serviceWorker';\nimport history from './utility/history';\n\nconst store = appStore({}, history);\nconst mountNode = document.getElementById('root');\n\nrender(\n    <Suspense fallback={<div className=\"loader-container\">Error! Please refresh the page</div>}>\n        <Provider store={store}>\n            <ConnectedRouter history={history}>\n                <Router basename={process.env.PUBLIC_URL} history={history}>\n                    <App/>\n                </Router>\n            </ConnectedRouter>\n        </Provider>\n    </Suspense>,\n    mountNode);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export const MOVIE_FETCH_REQUEST = 'MOVIE_FETCH_REQUEST';\nexport const MOVIE_FETCH_REQUEST_SUCCESS = 'MOVIE_FETCH_REQUEST_SUCCESS';\nexport const MOVIE_FETCH_REQUEST_FAILURE = 'MOVIE_FETCH_REQUEST_FAILURE';\n\nexport const MOVIE_CLEAN_REQUEST = 'MOVIE_CLEAN_REQUEST';\n\nexport const MOVIE_DETAIL_FETCH_REQUEST = 'MOVIE_DETAIL_FETCH_REQUEST';\nexport const MOVIE_DETAIL_FETCH_REQUEST_SUCCESS = 'MOVIE_DETAIL_FETCH_REQUEST_SUCCESS';\nexport const MOVIE_DETAIL_FETCH_REQUEST_FAILURE = 'MOVIE_DETAIL_FETCH_REQUEST_FAILURE';\n\nexport const MOVIE_DETAIL_CLEAN_REQUEST = 'MOVIE_DETAIL_CLEAN_REQUEST';\n"],"sourceRoot":""}