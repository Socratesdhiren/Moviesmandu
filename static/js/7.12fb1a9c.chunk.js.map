{"version":3,"sources":["component/Exception/NotFound.js","container/Exception/NotFoundContainer.js","component/Movies/MovieDetail.js","component/Movies/List.js","actions/movieDetailAction.js","utility/config.js","utility/httpBase.js","utility/apifile.js","service/moviesSevice.js","actions/movieAction.js","container/Movies/ListContainer.js","container/Movies/index.js"],"names":["NotFound","status","title","subTitle","extra","to","className","NotFoundContainer","Component","Movie","props","movieDetails","movieDetailLoading","MovieDetailErrors","Response","span","description","Error","type","loading","active","lg","md","sm","src","Poster","alt","Title","level","style","textAlign","color","marginTop","imdbRating","marginBottom","Rated","Runtime","Genre","Actors","Writer","Director","Meta","Card","Form","create","withRouter","movies","movieErrors","movieLoading","moviePagination","fetchMoviesListByName","fetchMovieDetailByIdentifier","cleanMovie","form","getFieldDecorator","validateFields","getFieldValue","useState","modalVisible","setModalVisible","movielist","Search","handleMovieClicked","idmId","columns","dataIndex","align","render","text","record","Year","Type","key","fontSize","theme","onClick","imdbID","useEffect","name","page","Item","rules","required","message","placeholder","onSearch","err","values","searchParameter","enterButton","size","Array","map","movie","width","margin","hoverable","cover","block","bordered","rowKey","dataSource","pagination","total","data","parseInt","totalResults","showTotal","range","showSizeChanger","onChange","value","current","scroll","x","visible","height","onCancel","footer","movieDetailFetchRequest","MOVIE_DETAIL_FETCH_REQUEST","movieDetailFetchRequestSuccess","MOVIE_DETAIL_FETCH_REQUEST_SUCCESS","movieDetailFetchRequestFailure","error","MOVIE_DETAIL_FETCH_REQUEST_FAILURE","movieCleanRequest","MOVIE_DETAIL_CLEAN_REQUEST","API_BASE_URL","process","httpBase","instance","axios","baseURL","headers","Accept","responseType","interceptors","response","use","Promise","reject","fetch","endpoint","params","get","API_KEY","formData","dispatch","MOVIE_FETCH_REQUEST","then","MOVIE_FETCH_REQUEST_SUCCESS","catch","MOVIE_FETCH_REQUEST_FAILURE","movieFetchRequestFailure","identifier","ListContainer","actions","this","connect","state","payload","movieDetailErrors","bindActionCreators","Object","assign","moviesSevice","movieDetailAction","Movies","match","exact","path","url","component","List"],"mappings":"uMAmBeA,G,MAbE,WACb,OACQ,kBAAC,IAAD,CACIC,OAAO,MACPC,MAAM,MACNC,SAAS,8CACTC,MAAQ,kBAAC,IAAD,CAAMC,GAAE,MAASC,UAAU,WAA3B,uBCPlBC,E,iLAEE,OAAO,kBAAC,EAAD,U,GAFiBC,aAMjBD,a,oqBC2DAE,EAlED,SAACC,GAAW,IACfC,EAAuDD,EAAvDC,aAAcC,EAAyCF,EAAzCE,mBAAoBC,EAAqBH,EAArBG,kBAEzC,OACI,kBAAC,WAAD,KACI,kBAAC,IAAD,KACKA,GAAoD,UAA/BA,EAAkBC,UACxC,kBAAC,IAAD,CAAKC,KAAM,IACP,kBAAC,IAAD,CACIC,YAAaH,GAAqBA,EAAkBI,MACpDC,KAAK,WAIb,kBAAC,IAAD,CAAUC,QAASP,EAAoBQ,QAAM,GACzC,kBAAC,IAAD,CAAKC,GAAI,GAAIC,GAAI,GAAIC,GAAI,IAAzB,IAA8B,yBAC1BC,IAAKb,GAAgBA,EAAac,OAASd,EAAac,OAAS,oDACjEC,IAAKf,GAAgBA,EAAagB,SAGtC,kBAAC,IAAD,CAAKN,GAAI,GAAIC,GAAI,GAAIC,GAAI,IACrB,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAKF,GAAI,GAAIC,GAAI,GAAIC,GAAI,IACrB,kBAAC,IAAWI,MAAZ,CACIC,MAAO,GADX,KACiBjB,GAAgBA,EAAagB,QAClD,kBAAC,IAAD,CAAKZ,KAAM,EAAGc,MAAO,CAACC,UAAW,UAC7B,kBAAC,IAAD,CAAKC,MAAM,UACNF,MAAO,CAACG,UAAW,IAAKrB,GAAgBA,EAAasB,cAGlE,kBAAC,IAAD,CAAKJ,MAAO,CAACK,aAAc,SACvB,kBAAC,IAAD,CAAKb,GAAI,GAAIC,GAAI,GAAIC,GAAI,IAAzB,IAA8B,kBAAC,IAAD,CAAKQ,MAAM,UACNF,MAAO,CAACK,aAAc,IAAKvB,GAAgBA,EAAawB,OACvF,kBAAC,IAAD,CAAKJ,MAAM,UACNF,MAAO,CAACK,aAAc,IAAKvB,GAAgBA,EAAayB,SAC7D,kBAAC,IAAD,CAAKP,MAAO,CAACK,aAAc,GACtBH,MAAM,WAAWpB,GAAgBA,EAAa0B,SAG3D,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAKtB,KAAM,GACP,oDAEA,kBAAC,IAAD,CAAKA,KAAM,IACVJ,GAAgBA,EAAa2B,QAElC,kBAAC,IAAD,CAAKvB,KAAM,GACP,8CAEJ,kBAAC,IAAD,CAAKA,KAAM,IACNJ,GAAgBA,EAAa4B,QAElC,kBAAC,IAAD,CAAKxB,KAAM,GACP,+CAEJ,kBAAC,IAAD,CAAKA,KAAM,IACVJ,GAAgBA,EAAa6B,gBCrDnDC,EAAQC,IAARD,KA2LQE,MAAKC,QAALD,CAAcE,aArLhB,SAAAnC,GAAU,IACZoC,EAAuHpC,EAAvHoC,OAAQC,EAA+GrC,EAA/GqC,YAAaC,EAAkGtC,EAAlGsC,aAAcC,EAAoFvC,EAApFuC,gBAAiBC,EAAmExC,EAAnEwC,sBAAuBC,EAA4CzC,EAA5CyC,6BAA8BC,EAAc1C,EAAd0C,WAD9F,EAGyC1C,EAAM2C,KAA1DC,EAHW,EAGXA,kBAAmBC,EAHR,EAGQA,eAAgBC,EAHxB,EAGwBA,cAHxB,EAIsBC,oBAAS,GAJ/B,mBAIXC,EAJW,KAIGC,EAJH,KAKZC,EAAYd,GAAUA,EAAOe,OAuB7BC,EAAqB,SAACC,GACxBJ,GAAgB,GAChBR,EAA6BY,IAG3BC,EAAU,CAAC,CACb9D,MAAO,aACP+D,UAAW,QACXC,MAAO,OACPC,OAAQ,SAACC,EAAMC,GACX,OAAO,6BAAMA,GAAUA,EAAO1C,SAEnC,CACCzB,MAAO,gBACP+D,UAAW,OACXC,MAAO,OACPC,OAAQ,SAACC,EAAMC,GACX,OAAO,6BAAMA,GAAUA,EAAOC,QAGlC,CACIpE,MAAO,OACP+D,UAAW,OACXC,MAAO,OACPC,OAAQ,SAACC,EAAMC,GACX,OAAO,6BAAMA,GAAUA,EAAOE,QAGtC,CACIrE,MAAO,SACPsE,IAAK,YACLN,MAAO,SACPC,OAAQ,SAACC,EAAMC,GACX,OACI,kBAAC,WAAD,KACI,kBAAC,IAAD,CACInD,KAAK,MACLhB,MAAM,OACN2B,MAAO,CAAC4C,SAAU,OAAQ1C,MAAO,QAAS2C,MAAM,WAChDC,QAAS,kBAAMb,EAAmBO,EAAOO,eAajE,OANAC,qBAAU,WAEN,OADA3B,EAAsB,CAAC4B,KA7Eb,eA6E8BC,KA9EnC,IA+EE,eAER,IAGC,kBAAC,WAAD,KACKhC,GAAwC,UAAzBA,EAAYjC,UAC5B,kBAAC,IAAD,CAAKC,KAAM,IACP,kBAAC,IAAD,CACIC,YAAa+B,GAAeA,EAAY9B,MACxCC,KAAK,WAIb,uBAAGW,MAAO,CAACG,UAAW,IAAI,0DAC1B,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAKX,GAAI,GAAIC,GAAI,GAAIC,GAAI,IACrB,kBAAC,IAAKyD,KAAN,KACK1B,EACG,kBACA,CACI2B,MAAO,CAAC,CAACC,UAAU,EAAMC,QAAS,6BAHzC7B,CAMG,kBAAC,IAAMO,OAAP,CAAcuB,YAAY,0BAA0BC,SAhFrD,WACvB9B,GAAe,SAAC+B,EAAKC,GACZD,GACDpC,EAAsB,CAAC4B,KAAMS,EAAOC,gBAAiBT,KA3BxD,QAyGiCU,YAAY,SACZC,KAAK,QACLvE,SAAS,EACTU,MAAO,CAACK,aAAc,eAOxD,kBAAC,IAAD,KACI,kBAAC,IAAD,KACK0B,aAAqB+B,OAAS/B,EAAUgC,KAAI,SAACC,GAAD,OACzC,kBAAC,IAAD,CAAKxE,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAAIiD,IAAKqB,EAAMjB,QAClC,kBAAC,IAAD,CACIzD,QAAS6B,EACTnB,MAAO,CAACiE,MAAO,IAAKC,OAAO,IAC3BC,WAAS,EACTrB,QAAS,kBAAMb,EAAmB+B,EAAMjB,SACxCqB,MAAO,yBAAKvE,IAAI,eAAeF,IAAKqE,EAAMpE,OAAN,UAAkBoE,EAAMpE,QAAW,iBAEvE,kBAACgB,EAAD,CAAMvC,MAAO2F,EAAMlE,MAAOX,YAAa6E,EAAMvB,OAE7C,kBAAC,IAAD,CAAKzC,MAAO,CAACG,UAAW,QAAS1B,UAAU,cACvC,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAKyB,MAAM,WAAW8D,EAAMtB,OAEhC,kBAAC,IAAD,CAAKxD,KAAM,IACP,kBAAC,IAAD,CAAQc,MAAO,CAACG,UAAW,QAAS2C,QAAS,kBAAIb,EAAmB+B,EAAMjB,SAAS1D,KAAK,UAChFgF,OAAK,GADb,uBAUxB,kBAAC,IAAD,KAEI,kBAAC,IAAWvE,MAAZ,CAAkBC,MAAO,EAAGC,MAAO,CAACE,MAAM,UAA1C,8BACJ,yBAAKzB,UAAW,aAEZ,kBAAC,IAAD,CACI6F,UAAQ,EACRnC,QAASA,EACToC,OAAQ,SAAA/B,GAAM,OAAIA,EAAOO,QACzByB,WAAYzC,aAAqB+B,MAAQ/B,EAAY,GAErD0C,WAAY,CACRC,MAAOtD,EAAgBuD,MAAQC,SAASxD,EAAgBuD,KAAKE,cAC7DC,UAAW,SAACJ,EAAOK,GAAR,wBAA6BA,EAAM,GAAnC,YAAyCA,EAAM,GAA/C,eAAwDL,IACnEM,iBAAiB,GAErB1F,QAAS6B,EACT8D,SAjJM,SAACR,GACvB,IAAMS,EAAQvD,EAAc,mBAAqBA,EAAc,mBAfrD,eAgBVN,EAAsB,CAClB4B,KAAMiC,EACNhC,KAAMuB,EAAWU,WA8ILC,OAAQ,CAACC,EAAG,mBAIpB,kBAAC,IAAD,CACIhH,MAAM,2BACNiH,QAASzD,EACToC,MAAO,IACPsB,OAAQ,IACRC,SAhKU,WACtB1D,GAAgB,GAChBP,KA+JYkE,OAAQ,MAER,kBAAC,EAAU5G,KAInB,kBAAC,IAAD,KACI,yBAAKJ,UAAU,sBAAf,Y,OCrLHiH,EAA0B,WACnC,MAAO,CACHrG,KAAMsG,MAIDC,EAAiC,SAAAjB,GAC1C,MAAO,CACHtF,KAAMwG,IACNlB,SAIKmB,EAAiC,SAAAC,GAC1C,MAAO,CACH1G,KAAM2G,IACND,UAIKE,EAAoB,WAC7B,MAAO,CACH5G,KAAM6G,M,kBC7BDC,EAAY,UAAMC,4BCGlBC,EAAW,WACtB,IAAMC,EAAWC,IAAMxF,OAAO,CAC5ByF,QAAQ,GAAD,OAAKL,GACZM,QAAS,CACPC,OAAQ,mBACR,eAAgB,oBAElBC,aAAc,SAYhB,OATAL,EAASM,aAAaC,SAASC,KAC7B,SAAAD,GACE,OAAOA,KAET,SAAAd,GACE,OAAOgB,QAAQC,OAAOjB,MAInBO,GCpBF,SAASW,EAAMC,EAAUC,GAC5B,OAAOd,IAAWe,IAAX,WAAmBF,GAAY,CAAEC,WCSpC,IAAME,EAAO,UAAMjB,YAEd/E,EAAwB,SAACiG,GAClC,OAAO,SAAAC,GAEH,OADAA,ECZG,CACHlI,KAAMmI,MDYCP,EAAM,MAAD,OAAOK,EAASrE,KAAhB,mBAA+BoE,EAA/B,iBAA+CC,EAASpE,OAC/DuE,MAAK,SAAAZ,GCTsB,IAAAlC,EDUC,UAArBkC,EAAS5H,UACTsI,GCXoB5C,EDWckC,ECV3C,CACHxH,KAAMqI,IACN/C,aDaKgD,OAAM,SAAA5B,GAAK,OAAIwB,ECTY,SAAAxB,GACpC,MAAO,CACH1G,KAAMuI,IACN7B,SDM6B8B,CAAyB9B,EAAM3G,aAIvDkC,EAA+B,SAACwG,GACzC,OAAO,SAAAP,GAEH,OADAA,EAAS7B,KACFuB,EAAM,MAAD,OAAOa,EAAP,mBAA4BT,IACnCI,MAAK,SAAAZ,GACuB,UAArBA,EAAS5H,UACTsI,EAAS3B,EAA+BiB,EAASlC,UAKxDgD,OAAM,SAAA5B,GAAK,OAAIwB,EAASzB,EAA+BC,EAAM3G,aE9B7D2I,EAAb,2MAMI1G,sBAAwB,SAAAiG,GACpB,EAAKzI,MAAMmJ,QAAQ3G,sBAAsBiG,IAPjD,EAeIhG,6BAA+B,SAAAyB,GAC3B,EAAKlE,MAAMmJ,QAAQ1G,6BAA6ByB,IAhBxD,EAuBIxB,WAAa,WACT,EAAK1C,MAAMmJ,QAAQ/B,qBAxB3B,wEA6BQ,OACI,kBAAC,EAAD,eACI5E,sBAAuB4G,KAAK5G,sBAC5BC,6BAA8B2G,KAAK3G,6BACnCC,WAAY0G,KAAK1G,YACb0G,KAAKpJ,YAlCzB,GAAmCF,aAiEpBuJ,eAtBS,SAAAC,GAAK,MAAK,CAC9BlH,OAAQkH,EAAMlH,OAAOmH,QAAQzD,KAC7BzD,YAAaiH,EAAMlH,OAAOmH,QAAQzD,KAClCxD,aAAcgH,EAAMlH,OAAO3B,QAC3B8B,gBAAiB+G,EAAMlH,OAAOmH,QAC9BtJ,aAAcqJ,EAAMrJ,aAAasJ,QACjCC,kBAAmBF,EAAMrJ,aAAasJ,QACtCrJ,mBAAoBoJ,EAAMrJ,aAAaQ,YAMhB,SAAAiI,GACvB,MAAO,CACHS,QAASM,YACLC,OAAOC,OAAO,GAAIC,EAAcC,GAChCnB,MAKGW,CAGbH,G,SC5DaY,UAVA,SAAC,GAAD,IAAEC,EAAF,EAAEA,MAAF,OACX,kBAAC,WAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAI,UAAKF,EAAMG,KAAOC,UAAWC,IAE9C,kBAAC,IAAD,CAAOD,UAAW7K,gB","file":"static/js/7.12fb1a9c.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Result } from 'antd';\n\nimport './style.css';\n\nconst NotFound = () => {\n    return (\n            <Result\n                status=\"404\"\n                title=\"404\"\n                subTitle=\"Sorry, the page you visited does not exist.\"\n                extra={ <Link to={`/#/`} className=\"ant-btn\">\n                    Go Back to Home\n                </Link>}\n            />\n    );\n};\n\nexport default NotFound;\n","import React, { Component } from 'react';\n\n// Import custom components\nimport NotFound from '../../component/Exception/NotFound';\n\nclass NotFoundContainer extends Component {\n    render() {\n        return <NotFound />;\n    }\n}\n\nexport default NotFoundContainer;\n","import React, {Fragment} from 'react';\n\nimport {Row, Col, Tag, Typography, Skeleton, Alert} from 'antd';\n\nconst Movie = (props) => {\n    const {movieDetails, movieDetailLoading, MovieDetailErrors} = props;\n\n    return (\n        <Fragment>\n            <Row>\n                {MovieDetailErrors && MovieDetailErrors.Response === \"False\" &&\n                <Col span={24}>\n                    <Alert\n                        description={MovieDetailErrors && MovieDetailErrors.Error}\n                        type=\"error\"\n                    />\n                </Col>\n                }\n                <Skeleton loading={movieDetailLoading} active>\n                    <Col lg={11} md={24} sm={24}> <img\n                        src={movieDetails && movieDetails.Poster ? movieDetails.Poster : 'https://placehold.it/198x264&text=Image+Not+Found'}\n                        alt={movieDetails && movieDetails.Title}\n                    />\n                    </Col>\n                    <Col lg={13} md={24} sm={24}>\n                        <Row>\n                            <Col lg={21} md={24} sm={24}>\n                                <Typography.Title\n                                    level={3}>  {movieDetails && movieDetails.Title}</Typography.Title></Col>\n                            <Col span={3} style={{textAlign: 'right'}}>\n                                <Tag color=\"#2db7f5\"\n                                     style={{marginTop: 5}}>{movieDetails && movieDetails.imdbRating}</Tag>\n                            </Col>\n                        </Row>\n                        <Row style={{marginBottom: '20px'}}>\n                            <Col lg={24} md={24} sm={24}> <Tag color=\"#108ee9\"\n                                                               style={{marginBottom: 3}}>{movieDetails && movieDetails.Rated}</Tag>\n                                <Tag color=\"#108ee9\"\n                                     style={{marginBottom: 3}}>{movieDetails && movieDetails.Runtime}</Tag>\n                                <Tag style={{marginBottom: 3}}\n                                     color=\"#108ee9\">{movieDetails && movieDetails.Genre}</Tag>\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col span={6}>\n                                <strong> Cast and Crew:</strong>\n                            </Col>\n                                <Col span={18}>\n                                {movieDetails && movieDetails.Actors}\n                            </Col>\n                            <Col span={6}>\n                                <strong> Writer: </strong>\n                            </Col>\n                            <Col span={18}>\n                                {movieDetails && movieDetails.Writer}\n                            </Col>\n                            <Col span={6}>\n                                <strong> Director:</strong>\n                            </Col>\n                            <Col span={18}>\n                            {movieDetails && movieDetails.Director}\n                            </Col>\n                        </Row>\n                    </Col>\n                </Skeleton>\n            </Row>\n        </Fragment>\n    )\n};\n\nexport default Movie;\n","import React, {Fragment, useEffect, useState} from 'react';\nimport {withRouter} from 'react-router-dom';\n\nimport {Row, Col, Input, Card, Tag, Form, Alert, Table, Modal, Button,Typography, Icon, BackTop} from 'antd';\n\nimport Movie from './MovieDetail';\n\nconst {Meta} = Card;\n\n//set the default value\nconst page = 1;\nconst movieName = 'fast furious';\n\nconst List = props => {\n    const {movies, movieErrors, movieLoading, moviePagination, fetchMoviesListByName, fetchMovieDetailByIdentifier, cleanMovie} = props;\n\n    const {getFieldDecorator, validateFields, getFieldValue} = props.form;\n    const [modalVisible, setModalVisible] = useState(false);\n    const movielist = movies && movies.Search;\n\n    const handleModalCancel = () => {\n        setModalVisible(false);\n        cleanMovie();\n    };\n\n    const handleTableChange = (pagination) => {\n        const value = getFieldValue('searchParameter') ? getFieldValue('searchParameter') : movieName;\n        fetchMoviesListByName({\n            name: value,\n            page: pagination.current,\n        });\n\n    };\n\n    const handleSearchMovies = () => {\n        validateFields((err, values) => {\n            if (!err) {\n                fetchMoviesListByName({name: values.searchParameter, page: page});\n            }\n        });\n    };\n    const handleMovieClicked = (idmId) => {\n        setModalVisible(true);\n        fetchMovieDetailByIdentifier(idmId);\n    };\n\n    const columns = [{\n        title: 'Movie Name',\n        dataIndex: 'Title',\n        align: 'left',\n        render: (text, record) => {\n            return <div>{record && record.Title}</div>;\n        },\n    }, {\n        title: 'Released Year',\n        dataIndex: 'Year',\n        align: 'left',\n        render: (text, record) => {\n            return <div>{record && record.Year}</div>;\n        },\n    },\n        {\n            title: 'Type',\n            dataIndex: 'Type',\n            align: 'left',\n            render: (text, record) => {\n                return <div>{record && record.Type}</div>;\n            },\n        },\n        {\n            title: 'Action',\n            key: 'operation',\n            align: 'center',\n            render: (text, record) => {\n                return (\n                    <Fragment>\n                        <Icon\n                            type=\"eye\"\n                            title=\"View\"\n                            style={{fontSize: '22px', color: '#08c'}} theme=\"outlined\"\n                            onClick={() => handleMovieClicked(record.imdbID)}\n                        />\n                    </Fragment>\n                );\n            },\n        },\n    ];\n    useEffect(() => {\n        fetchMoviesListByName({name: movieName, page: page});\n        return () => {\n        };\n    }, []);\n\n    return (\n        <Fragment>\n            {movieErrors && movieErrors.Response === \"False\" &&\n            <Col span={24}>\n                <Alert\n                    description={movieErrors && movieErrors.Error}\n                    type=\"error\"\n                />\n            </Col>\n            }\n            <p style={{marginTop: 8}}><strong>Search Movies By Name</strong></p>\n            <Row>\n                <Form>\n                    <Col lg={12} md={24} sm={24}>\n                        <Form.Item>\n                            {getFieldDecorator(\n                                'searchParameter',\n                                {\n                                    rules: [{required: true, message: \"Please enter movie name\"}]\n                                }\n                            )(\n                                <Input.Search placeholder=\"Please enter movie name\" onSearch={handleSearchMovies}\n                                              enterButton=\"Search\"\n                                              size=\"large\"\n                                              loading={false}\n                                              style={{marginBottom: '10px'}}/>\n                            )}\n                        </Form.Item>\n                    </Col>\n                </Form>\n            </Row>\n\n            <Row>\n                <Row>\n                    {movielist instanceof Array && movielist.map((movie) =>\n                        <Col lg={6} md={8} sm={12} key={movie.imdbID}>\n                            <Card\n                                loading={movieLoading}\n                                style={{width: 260, margin:10}}\n                                hoverable\n                                onClick={() => handleMovieClicked(movie.imdbID)}\n                                cover={<img alt=\"movie-poster\" src={movie.Poster ? `${movie.Poster}` : 'invalid.src'}/>}\n                            >\n                                <Meta title={movie.Title} description={movie.Year}/>\n\n                                <Row style={{marginTop: '10px'}} className=\"gutter-row\">\n                                    <Col>\n                                        <Tag color=\"#3f51b5\">{movie.Type}</Tag>\n                                    </Col>\n                                    <Col span={24}>\n                                        <Button style={{marginTop: '10px'}} onClick={()=>handleMovieClicked(movie.imdbID)} type=\"primary\"\n                                                block>View Detail</Button>\n                                    </Col>\n\n                                </Row>\n                            </Card>\n                        </Col>)\n                    }\n                </Row>\n\n                <Row>\n\n                    <Typography.Title level={2} style={{color:'black'}}>Movie List with Pagination</Typography.Title>\n                <div className={'table-box'}>\n\n                    <Table\n                        bordered\n                        columns={columns}\n                        rowKey={record => record.imdbID}\n                        dataSource={movielist instanceof Array ? movielist : []}\n\n                        pagination={{\n                            total: moviePagination.data && parseInt(moviePagination.data.totalResults),\n                            showTotal: (total, range) => `Showing ${range[0]}-${range[1]} of ${total}`,\n                            showSizeChanger: false,\n                        }}\n                        loading={movieLoading}\n                        onChange={handleTableChange}\n                        scroll={{x: 'max-content'}}\n                    />\n                </div>\n                </Row>\n                <Modal\n                    title=\"Movie Detail Information\"\n                    visible={modalVisible}\n                    width={800}\n                    height={500}\n                    onCancel={handleModalCancel}\n                    footer={null}\n                >\n                    <Movie {...props} />\n                </Modal>\n            </Row>\n\n            <BackTop>\n                <div className=\"ant-back-top-inner\">UP</div>\n            </BackTop>\n        </Fragment>\n    );\n};\n\nexport default Form.create()(withRouter(List));\n","import {\n    MOVIE_DETAIL_FETCH_REQUEST,\n    MOVIE_DETAIL_FETCH_REQUEST_SUCCESS,\n    MOVIE_DETAIL_FETCH_REQUEST_FAILURE,\n    MOVIE_DETAIL_CLEAN_REQUEST,\n} from './actionTypes'\n\nexport const movieDetailFetchRequest = () => {\n    return {\n        type: MOVIE_DETAIL_FETCH_REQUEST,\n    };\n};\n\nexport const movieDetailFetchRequestSuccess = data => {\n    return {\n        type: MOVIE_DETAIL_FETCH_REQUEST_SUCCESS,\n        data,\n    };\n};\n\nexport const movieDetailFetchRequestFailure = error => {\n    return {\n        type: MOVIE_DETAIL_FETCH_REQUEST_FAILURE,\n        error,\n    };\n};\n\nexport const movieCleanRequest = () => {\n    return {\n        type: MOVIE_DETAIL_CLEAN_REQUEST,\n    };\n};\n","export const API_BASE_URL = `${process.env.REACT_APP_REST_API_HOST}`;\n","import axios from 'axios';\nimport { API_BASE_URL } from './config';\n\nexport const httpBase = () => {\n  const instance = axios.create({\n    baseURL: `${API_BASE_URL}`,\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n    },\n    responseType: 'json',\n  });\n\n  instance.interceptors.response.use(\n    response => {\n      return response;\n    },\n    error => {\n      return Promise.reject(error);\n    }\n  );\n\n  return instance;\n};\n","import {httpBase} from \"./httpBase\";\n\nexport function fetch(endpoint, params) {\n    return httpBase().get(`/${endpoint}`, { params });\n}\n\nexport function store(endpoint, data) {\n    return httpBase().post(`/${endpoint}`, data);\n}\n","import {\n    movieFetchRequest,\n    movieFetchRequestSuccess,\n    movieFetchRequestFailure\n} from '../actions/movieAction'\nimport {\n    movieDetailFetchRequest,\n    movieDetailFetchRequestSuccess,\n    movieDetailFetchRequestFailure\n} from '../actions/movieDetailAction'\nimport { fetch } from '../utility/apifile';\n\nexport  const API_KEY = `${process.env.REACT_APP_API_KEY}`;\n\nexport const fetchMoviesListByName = (formData) => {\n    return dispatch => {\n        dispatch(movieFetchRequest());\n        return fetch(`?s=${formData.name}&apikey=${API_KEY}&page=${formData.page}`)\n            .then(response => {\n                if (response.Response !=='False') {\n                    dispatch(movieFetchRequestSuccess(response));\n                } else {\n                    // TODO\n                }\n            })\n            .catch(error => dispatch(movieFetchRequestFailure(error.Error)));\n    };\n};\n\nexport const fetchMovieDetailByIdentifier = (identifier) => {\n    return dispatch => {\n        dispatch(movieDetailFetchRequest());\n        return fetch(`?i=${identifier}&apikey=${API_KEY}`)\n            .then(response => {\n                if (response.Response !=='False') {\n                    dispatch(movieDetailFetchRequestSuccess(response.data));\n                } else {\n                    // TODO\n                }\n            })\n            .catch(error => dispatch(movieDetailFetchRequestFailure(error.Error)));\n    };\n};\n","\nimport  { MOVIE_FETCH_REQUEST,MOVIE_FETCH_REQUEST_SUCCESS,MOVIE_FETCH_REQUEST_FAILURE} from './actionTypes'\n\nexport const movieFetchRequest = () => {\n    return {\n        type: MOVIE_FETCH_REQUEST,\n    };\n};\n\nexport const movieFetchRequestSuccess = data => {\n    return {\n        type: MOVIE_FETCH_REQUEST_SUCCESS,\n        data,\n    };\n};\n\nexport const movieFetchRequestFailure = error => {\n    return {\n        type: MOVIE_FETCH_REQUEST_FAILURE,\n        error,\n    };\n};\n","import React, {Component} from 'react';\nimport {bindActionCreators} from 'redux';\nimport {connect} from 'react-redux';\n\n// Import custom components\nimport List from '../../component/Movies/List';\nimport * as moviesSevice from '../../service/moviesSevice';\nimport * as movieDetailAction from '../../actions/movieDetailAction';\n\n\nexport class ListContainer extends Component {\n    /**\n     * Fetch movie by formData.\n     * @param {object} formData\n     *\n     */\n    fetchMoviesListByName = formData => {\n        this.props.actions.fetchMoviesListByName(formData);\n    };\n\n    /**\n     * Fetch movie detail by identifier.\n     * @param {string} imdbID\n     *\n     */\n    fetchMovieDetailByIdentifier = imdbID => {\n        this.props.actions.fetchMovieDetailByIdentifier(imdbID);\n    };\n\n    /**\n     * Clean single movie record on modal close\n     *\n     */\n    cleanMovie = () => {\n        this.props.actions.movieCleanRequest();\n    };\n\n    render() {\n\n        return (\n            <List\n                fetchMoviesListByName={this.fetchMoviesListByName}\n                fetchMovieDetailByIdentifier={this.fetchMovieDetailByIdentifier}\n                cleanMovie={this.cleanMovie}\n                {...this.props}\n            />\n        );\n    }\n}\n\n/**\n * Map the state to props.\n */\nconst mapStateToProps = state => ({\n    movies: state.movies.payload.data,\n    movieErrors: state.movies.payload.data,\n    movieLoading: state.movies.loading,\n    moviePagination: state.movies.payload,\n    movieDetails: state.movieDetails.payload,\n    movieDetailErrors: state.movieDetails.payload,\n    movieDetailLoading: state.movieDetails.loading,\n});\n\n/**\n * Map the actions to props.\n */\nconst mapDispatchToProps = dispatch => {\n    return {\n        actions: bindActionCreators(\n            Object.assign({}, moviesSevice, movieDetailAction),\n            dispatch\n        ),\n    };\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(ListContainer);\n","import React, {Fragment} from 'react';\nimport {Switch, Route} from 'react-router-dom';\n\n// Import custom components\nimport List from './ListContainer';\n\nimport NotFound from '../Exception/NotFoundContainer';\n\nconst Movies = ({match}) => (\n    <Fragment>\n        <Switch>\n            <Route exact path={`${match.url}`} component={List}/>\n\n            <Route component={NotFound}/>\n        </Switch>\n    </Fragment>\n);\n\nexport default Movies;\n"],"sourceRoot":""}